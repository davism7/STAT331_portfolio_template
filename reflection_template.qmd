---
title: "STAT 331 Portfolio"
author: "Davis Morales"
format: html 
embed-resources: true
layout: margin-left
editor: visual
toc: true
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 2 ; Problem 1
surveys <- read_csv(here::here("Week 2", "Lab 2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 3 ; Problem 2
evaluations <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3 ; Problem 8
teacher_evals_clean |>
  filter(if_any(everything(), is.na)) |>
  select(course_id, teacher_id, percent_failed_cur)
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-
# Lab 3 ; Problem 5
# Portfolio Revision: previously selected the columns I wanted to keep, but now I'm removing the columns I don't want to keep
teacher_evals_clean <- evaluations |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  filter(no_participants >= 10) |>
  select(-stud_grade_avg, -stud_grade_std, -stud_grade_var_coef, -percent_failed, -stud_grade_avg_cur, -stud_grade_std_cur, -stud_grade_var_coef_cur, -class_duration, -weekday, -time_of_day, -SET_score_1sem, -maximum_score)
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Lab 4 ; Problem 7
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(mean_price = mean(price, na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 ; Problem 5
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_glue = "median_income_{study_year}"
  ) |>
  arrange(desc(median_income_2018))
median_income_region
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2
# Challenge 3 ; Problem 1
teacher_evals_comparison <- evaluations |>
  filter(question_no == 903) |>
  mutate(
    set_level = case_when(
      SET_score_avg >= 4 ~ "excellent",
      TRUE ~ "standard"
    ),
    sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority <= 8 ~ "senior",
      TRUE ~ "very senior"
    )
  ) |>
  select(course_id, set_level, sen_level)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 5 ; Problem 2
inspected_person <- person |>
  filter(
    (address_street_name == "Northwestern Dr" &
       address_number == max(address_number[address_street_name == "Northwestern Dr"])) |
    (address_street_name == "Franklin Ave" &
       str_detect(name, pattern = "Annabel"))
  )
inspected_person
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5 ; Problem 7
insepected_drivers_license <- drivers_license |>
  filter(
    id %in% c(173289, 423327),
    str_detect(plate_number, pattern = "H42W")
  )
insepected_drivers_license
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# Lab 5 ; Problem 5
# Portfolio Revision: previously filtered "check_in_date" based on character, but now I filter it based on ymd
insepected_get_fit_now_check_in <- get_fit_now_check_in |>
  mutate(
    date = ymd(as.character(check_in_date))
  ) |>
  filter(
    membership_id %in% c("48Z7A", "48Z55"),
    date == ymd("20180109")
  )
insepected_get_fit_now_check_in
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Challenge 3 ; Problem 1
teacher_evals_comparison <- evaluations |>
  filter(question_no == 903) |>
  mutate(
    set_level = case_when(
      SET_score_avg >= 4 ~ "excellent",
      TRUE ~ "standard"
    ),
    sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority <= 8 ~ "senior",
      TRUE ~ "very senior"
    )
  ) |>
select(course_id, set_level, sen_level)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
# Challenge 4 ; Problem "Summary Statistics"
regional_summary <- ca_childcare |>
  select(region, pr_f, mcsa, mfccsa) |>
  group_by(region) |>
  summarize(
    `Average Poverty Rate (%)` = mean(pr_f, na.rm = TRUE),
    `Avg Center-Based Cost ($)` = mean(mcsa, na.rm = TRUE),
    `Avg Family (In-Home) Cost ($)` = mean(mfccsa, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(`Average Poverty Rate (%)`)
regional_summary
```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Lab 4 ; Problem 7
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(mean_price = mean(price, na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4 ; Problem 7
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(mean_price = mean(price, na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 4 ; Problem 4
ca_childcare <- ca_childcare |> 
  mutate(
    county_name = str_remove(county_name, " County"),
    region = fct_collapse(
      county_name,
      "Superior" = superior_counties,
      "North Coast" = north_coast_counties,
      "San Francisco" = san_fran_counties,
      "Northern San Joaquin" = n_san_joaquin_counties,
      "Central Coast" = central_coast_counties,
      "Southern San Joaquin" = s_san_joaquin_counties,
      "Inland" = inland_counties,
      "Los Angeles County" = la_county,
      "Orange County" = orange_county,
      "San Deigo Imperial" = san_diego_imperial_counties
    )
  )
glimpse(ca_childcare)
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5 ; Problem 5
# Portfolio Revision: previously filtered "check_in_date" based on character, but now I filter it based on ymd
insepected_get_fit_now_check_in <- get_fit_now_check_in |>
  mutate(
    date = ymd(as.character(check_in_date))
  ) |>
  filter(
    membership_id %in% c("48Z7A", "48Z55"),
    date == ymd("20180109")
  )
insepected_get_fit_now_check_in
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 4 ; Problem 2
ca_childcare <- childcare_costs |>
  left_join(counties, by = c("county_fips_code" = "county_fips_code")) |>
  filter(state_name == "California")
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# Lab 4 ; Problem 2
# Portfolio Revision: previously I combined dataframes using left_join, but now I combine them with right_join
ca_childcare <- counties |>
  right_join(childcare_costs, by = c("county_fips_code" = "county_fips_code"))
  filter(state_name == "California")
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2
# Lab 4 ; Problem 3
ca_childcare <- ca_childcare |>
  left_join(tax_rev, by = c("county_name" = "entity_name", "study_year" = "year"))
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 4 ; Problem 2
# Portfolio Revision: previously I combined dataframes using left_join based on matching counties, but now I combine them with innter_join based on matching counties
ca_childcare_inner <- childcare_costs |>
  inner_join(counties, by = c("county_fips_code" = "county_fips_code")) |>
  filter(state_name == "California")
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# Lab 4 ; Problem 3
# Portfolio Revision: previously I combined dataframes using left_join, but now I combine them with inner_join
ca_income_tax <- childcare_costs |>
  inner_join(tax_rev, by = c("county_name" = "entity_name", "study_year" = "year"))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# Lab 5 ; Problem 3
# Portfolio Revision: previously I filtered only the records that match the ID, but now I use semi_join to keep the records that match the ID
inspected_person <- person |>
  semi_join(
    interview |> filter(person_id %in% c(14887, 16371)),
    by = c("id" = "person_id")
  )
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
# Lab 5 ; Problem 3
# Portfolio Revision: previously I filtered only the records that match the ID, but now I use anti_join to keep the records that match the ID
inspected_person <- person |>
  anti_join(
    interview |> filter(!person_id %in% c(14887, 16371)),
    by = c("id" = "person_id")
  )
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4 ; Problem 7
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(mean_price = mean(price, na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4 ; Problem 5
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_glue = "median_income_{study_year}"
  ) |>
  arrange(desc(median_income_2018))
median_income_region
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 4 ; Problem 8
ggplot(data = ca_childcare,
       mapping = aes(x = mhi_2018,
                     y = mc_infant )) +
  geom_point(color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Median Household Income (2018)",
       y = "Median Price for CB Infant Childcare",
       title = "Relationship Between Household Income & Infant Childcare Price")
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 3 ; Problem 5
teacher_evals_clean <- evaluations |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  filter(no_participants >= 10) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur,
         academic_degree, seniority, sex)
```

-   Example of function formatting

```{r}
#| label: r-2-3
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
# Lab 4 ; Problem 7
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(mean_price = mean(price, na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 4 ; Problem 8
ggplot(data = ca_childcare,
       mapping = aes(x = mhi_2018,
                     y = mc_infant )) +
  geom_point(color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Median Household Income (2018)",
       y = "Median Price for CB Infant Childcare",
       title = "Relationship Between Household Income & Infant Childcare Price")
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# Lab 2 ; Problem 4-8
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.2, 
              color = "steelblue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Species",
       y = "",
       title = "Weight Based on Species",
       subtitle = "Y-axis: Weight (g)")
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
# Challenge 3 ; Question 2
ggplot(data = teacher_evals_comparison, 
       mapping = aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("excellent" = "#B896D4", "standard" = "#BA955C")) +
  labs(title = "Evaluation of Teachers' Use of Activities",
       x = "Years of Experience", 
       y = "", 
       fill = "Evaluation Rating") +
  theme(legend.position = "top")
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
# Lab 4 ; Problem 7
ggplot(price_by_age,
       aes(x = study_year, y = mean_price, color = region)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_wrap(~age, ncol = 3) +
  labs(
    x = "Study Year",
    y = "",
    title = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  theme_minimal(base_size = 10) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 4 ; Problem 7
ggplot(price_by_age,
       aes(x = study_year, y = mean_price, color = region)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_wrap(~age, ncol = 3) +
  labs(
    x = "Study Year",
    y = "",
    title = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  theme_minimal(base_size = 10) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Challenge 2 ; Plot
surveys <- read_csv(here::here("Week 2", "Lab 2", "surveys.csv"))
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(alpha = 0.2, 
              color = "grey",
              size = 0.8) +
  geom_boxplot(aes(fill = sex),
                   outlier.shape = NA) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Species",
       y = "",
       title = "Weight Based on Species",
       subtitle = "Y-axis: Weight (g)") +
  scale_fill_manual(values = c("pink", "#89CFF0"))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# Lab 4 ; Problem 8
ggplot(data = ca_childcare,
       mapping = aes(x = mhi_2018,
                     y = mc_infant )) +
  geom_point(color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Median Household Income (2018)",
       y = "Median Price for CB Infant Childcare",
       title = "Relationship Between Household Income & Infant Childcare Price")
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Challenge 4 ; Plot
ggplot(regional_table,
       aes(x = avg_poverty, y = avg_price, color = setting)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm", se = FALSE) +
  geom_text(aes(label = region),
            vjust = -0.8, size = 3, color = "gray30") +
  labs(
    title = "Correlation Between Poverty Rate and Childcare Price by Setting",
    x = "Average Poverty Rate (%)",
    y = "Average Full-Time Median Weekly Price ($)",
    color = "Childcare Setting"
  ) +
  theme_minimal(base_size = 12)
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
# Lab 4 ; Problem 7
ggplot(price_by_age,
       aes(x = study_year, y = mean_price, color = region)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_wrap(~age, ncol = 3) +
  labs(
    x = "Study Year",
    y = "",
    title = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  theme_minimal(base_size = 10) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Challenge 2 ; Plot
surveys <- read_csv(here::here("Week 2", "Lab 2", "surveys.csv"))
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(alpha = 0.2, 
              color = "grey",
              size = 0.8) +
  geom_boxplot(aes(fill = sex),
                   outlier.shape = NA) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Species",
       y = "",
       title = "Weight Based on Species",
       subtitle = "Y-axis: Weight (g)") +
  scale_fill_manual(values = c("pink", "#89CFF0"))
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Challenge 3 ; Problem 2
ggplot(data = teacher_evals_comparison, 
       mapping = aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("excellent" = "#B896D4", "standard" = "#BA955C")) +
  labs(title = "Evaluation of Teachers' Use of Activities",
       x = "Years of Experience", 
       y = "", 
       fill = "Evaluation Rating") +
  theme(legend.position = "top")
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2
# Challenge 4 ; Plot
ggplot(regional_table,
       aes(x = avg_poverty, y = avg_price, color = setting)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm", se = FALSE) +
  geom_text(aes(label = region),
            vjust = -0.8, size = 3, color = "gray30") +
  labs(
    title = "Correlation Between Poverty Rate and Childcare Price by Setting",
    x = "Average Poverty Rate (%)",
    y = "Average Full-Time Median Weekly Price ($)",
    color = "Childcare Setting"
  ) +
  theme_minimal(base_size = 12)
```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3
# Lab 4 ; Problem 8
ggplot(data = ca_childcare,
       mapping = aes(x = mhi_2018,
                     y = mc_infant )) +
  geom_point(color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Median Household Income (2018)",
       y = "Median Price for CB Infant Childcare",
       title = "Relationship Between Household Income & Infant Childcare Price")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 3 ; Problem 6
teacher_evals_clean |>
  summarise(
    instructors = n_distinct(teacher_id),
    courses = n_distinct(course_id)
  )
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
# Lab 4 ; Problem 7
# Portfolio Revision: previously I used summarise to calculate the average price per group, but now I used across to perform the same summarization
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year) |>
  summarise(
    across(
      .cols = price,
      .fns = list(mean_price = ~ mean(.x, na.rm = TRUE)),
      .names = "{.fn}"
    ),
    .groups = "drop"
  ) |>
  mutate(
    age = factor(c("Infant", "Toddler", "Preschool")),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# Lab 3 ; Problem 10
teacher_evals_clean |>
  group_by(teacher_id) |>
  filter(question_no == 901) |>
  summarise(
    course_count = n_distinct(course_id),
    average = mean(SET_score_avg, na.rm = TRUE)
  ) |>
  filter(course_count >= 5) |>
  reframe(
    bind_rows(
      slice_max(cur_data(), average, n = 1),
      slice_min(cur_data(), average, n = 1)
    )
  )
```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 4 ; Problem 5
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_glue = "median_income_{study_year}"
  ) |>
  arrange(desc(median_income_2018))
median_income_region
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
# Challenge 4 ; Summary Statistics
regional_summary <- ca_childcare |>
  select(region, pr_f, mcsa, mfccsa) |>
  group_by(region) |>
  summarize(
    `Average Poverty Rate (%)` = mean(pr_f, na.rm = TRUE),
    `Avg Center-Based Cost ($)` = mean(mcsa, na.rm = TRUE),
    `Avg Family (In-Home) Cost ($)` = mean(mfccsa, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(`Average Poverty Rate (%)`)
regional_summary
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2
# Challenge 4 ; Summary Statistics
# Portfolio Revision: added boldface for column headers
ca_childcare |>
  select(region, pr_f, mcsa, mfccsa) |>
  group_by(region) |>
  summarize(
    `Average Poverty Rate (%)` = mean(pr_f, na.rm = TRUE),
    `Avg Center-Based Cost ($)` = mean(mcsa, na.rm = TRUE),
    `Avg Family (In-Home) Cost ($)` = mean(mfccsa, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(`Average Poverty Rate (%)`) |>
  kable() |>
  kable_styling(full_width = FALSE) |>
  row_spec(0, bold = TRUE)
```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
# Challenge 4 ; Summary Statistics
regional_summary <- ca_childcare |>
  select(region, pr_f, mcsa, mfccsa) |>
  group_by(region) |>
  summarize(
    `Average Poverty Rate (%)` = mean(pr_f, na.rm = TRUE),
    `Avg Center-Based Cost ($)` = mean(mcsa, na.rm = TRUE),
    `Avg Family (In-Home) Cost ($)` = mean(mfccsa, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(`Average Poverty Rate (%)`)
regional_summary
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1
# Challenge 4 ; Summary Statistics
# Portfolio Revision: added non-default color to the column headers
ca_childcare |>
  select(region, pr_f, mcsa, mfccsa) |>
  group_by(region) |>
  summarize(
    `Average Poverty Rate (%)` = mean(pr_f, na.rm = TRUE),
    `Avg Center-Based Cost ($)` = mean(mcsa, na.rm = TRUE),
    `Avg Family (In-Home) Cost ($)` = mean(mfccsa, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(`Average Poverty Rate (%)`) |>
  gt() |>
  tab_style(
    style = cell_fill(color = "#E3F2FD"),
    locations = cells_column_labels(everything())
  )
```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2
# Lab 4 ; Problem 5
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_glue = "median_income_{study_year}"
  ) |>
  arrange(desc(median_income_2018))
median_income_region
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Lab 4 ; Problem 7
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(mean_price = mean(price, na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   using `across()`

```{r}
#| label: pe-1-across
# Lab 4 ; Problem 7
# Portfolio Revision: previously I used summarise to calculate the average price per group, but now I used across to perform the same summarization
price_by_age <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year) |>
  summarise(
    across(
      .cols = price,
      .fns = list(mean_price = ~ mean(.x, na.rm = TRUE)),
      .names = "{.fn}"
    ),
    .groups = "drop"
  ) |>
  mutate(
    age = factor(c("Infant", "Toddler", "Preschool")),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1
```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2
```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across
# Lab 4 ; Problem 7
# Portfolio Revision: previously I was selecting and summarizing individually, but now I iterate over all the columns that start with mc_
price_by_age <- ca_childcare |>
  select(region, study_year, starts_with("mc_")) |>
  pivot_longer(
    cols = across(starts_with("mc_")),
    names_to = "age",
    values_to = "price"
  ) |>
  group_by(region, study_year, age) |>
  summarise(across(price, mean, .names = "mean_{.col}", na.rm = TRUE), .groups = "drop") |>
  mutate(
    age = fct_recode(factor(age),
                     "Infant" = "mc_infant",
                     "Toddler" = "mc_toddler",
                     "Preschool" = "mc_preschool"),
    age = fct_relevel(age, "Infant", "Toddler", "Preschool"),
    region = fct_reorder(region, mean_price, .fun = mean)
  )
```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1
```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
# Lab 3 ; Problem 5
teacher_evals_clean <- evaluations |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  filter(no_participants >= 10) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur,
         academic_degree, seniority, sex)
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
# Lab 4 ; Problem 8
# Portfolio Revision: previously I had the plot itself, but now I've connected a pipeline into the plot
ca_childcare |>
  ggplot(aes(x = mhi_2018, y = mc_infant)) +
  geom_point(color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(
    x = "Median Household Income (2018)",
    y = "Median Price for CB Infant Childcare",
    title = "Relationship Between Household Income & Infant Childcare Price"
  )
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1
```

-   Example 2

```{r}
#| label: dsm-1-2 
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Lab 2 ; Problem 17
species_mod <- aov(data = surveys, weight ~ species)
summary(species_mod)
```

-   Example 2

```{r}
#| label: dsm-2-2
# Challenge 3 ; Problem 3
tab <- table(teacher_evals_comparison$sen_level,
             teacher_evals_comparison$set_level)
chisq.test(tab)
```

-   Example 3

```{r}
#| label: dsm-2-3
# Lab 4 ; Problem 9
reg_mod1 <- lm(mc_infant ~ mhi_2018,
               data = ca_childcare)
summary(reg_mod1)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
